Find Day 1

1. user => (apply str (interpose "|" ["hi" "mum" "and" "dad"]))
"hi|mum|and|dad"

user=> (reverse [1 2 3])
(3 2 1)

user=> (next [1 2 3 4 5])
(2 3 4 5)

http://en.wikibooks.org/wiki/Clojure_Programming/Examples/API_Examples/Sequences#Sequence_Building

2. (fn name? ([params* ] exprs*)+)

http://clojure.org/special_forms

3. java -cp clojure.jar clojure.main
http://clojure.org/repl_and_main

Find Day 2

1.  The implementation of some of the commonly used macros in the
Clojure language


unless:
(defmacro unless [pred a b]
  `(if (not ~pred) ~a ~b))


nif:
(defmacro nif [expr pos zer neg]
	'(case (Integer/signum ~expr)
	-1 ~neg
	0 ~zer
	1 ~pos))

when:
(defmacro when [test &body]
	(list 'if test(cons 'do body)))

2. (defn lazy-ex
		 [n]
		 (take n (cycle [:beer :brats :booze]))
	)

3.  The current status of the defrecord and protocol features (these features
were still under development as this book was being developed)

defrecord and protocols were added to Clojure 1.2

Find Day 3

A queue implementation that blocks when the queue is empty and
waits for a new item in the queue

http://stackoverflow.com/questions/2760017/producer-consumer-with-qualifications



